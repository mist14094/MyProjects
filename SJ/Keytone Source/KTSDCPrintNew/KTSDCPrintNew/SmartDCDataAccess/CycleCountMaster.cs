///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CycleCountMaster'
// Generated by LLBLGen v1.0.2810.26788 Final on: Tuesday, November 13, 2007, 6:31:58 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using KTone.DAL.KTDBBaseLib;

namespace KTone.DAL.SmartDCDataAccess
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CycleCountMaster'.
	/// </summary>
	public class CycleCountMaster : DBInteractionBase
	{
		#region Class Member Declarations
		private SqlBoolean		m_bIsActive;
		private SqlDateTime		m_daUpdateDate, m_daLatePeriod, m_daCreateDate;
        private SqlInt32 m_iType, m_iTypeOld, m_iCycleCountID, m_iZoneID, _dataOwnerID;
        private SqlString       m_sMonitoredBy, m_sApprovedBy, m_sRequestedBy, m_sDescription, 
                                    m_sName, m_sComments;
        private SqlString       m_sCriteriaXML;
        #endregion

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CycleCountMaster()
		{
			// Nothing for now.
		}

        /// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>sName</LI>
		///		 <LI>sDescription. May be SqlString.Null</LI>
		///		 <LI>daStartDate</LI>
		///		 <LI>daEndDate</LI>
		///		 <LI>daLatePeriod. May be SqlDateTime.Null</LI>
		///		 <LI>iType</LI>
		///		 <LI>sComments. May be SqlString.Null</LI>
		///		 <LI>sRequestedBy. May be SqlString.Null</LI>
		///		 <LI>sMonitoredBy. May be SqlString.Null</LI>
		///		 <LI>sApprovedBy. May be SqlString.Null</LI>
		///		 <LI>bIsActive</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iCycleCountID</LI>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CycleCountMaster_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = _mainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sName", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDescription));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreateDate));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@daUpdateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daUpdateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iType));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sComments", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sComments));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRequestedBy", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRequestedBy));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMonitoredBy", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMonitoredBy));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sApprovedBy", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sApprovedBy));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bIsActive", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bIsActive));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sCriteriaXML", SqlDbType.Xml, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCriteriaXML));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@DataOwnerID", SqlDbType.Int, 4, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _dataOwnerID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iCycleCountID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iCycleCountID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iCycleCountID = (SqlInt32)scmCmdToExecute.Parameters["@iCycleCountID"].Value;
                _errorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if(_errorCode != 0)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CycleCountMaster_Insert' reported the ErrorCode: " + _errorCode);
				}
                
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CycleCountMaster::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}

		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iCycleCountID</LI>
		///		 <LI>sName</LI>
		///		 <LI>sDescription. May be SqlString.Null</LI>
		///		 <LI>daStartDate</LI>
		///		 <LI>daEndDate</LI>
		///		 <LI>daLatePeriod. May be SqlDateTime.Null</LI>
		///		 <LI>iType</LI>
		///		 <LI>sComments. May be SqlString.Null</LI>
		///		 <LI>sRequestedBy. May be SqlString.Null</LI>
		///		 <LI>sMonitoredBy. May be SqlString.Null</LI>
		///		 <LI>sApprovedBy. May be SqlString.Null</LI>
		///		 <LI>bIsActive</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CycleCountMaster_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = _mainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iCycleCountID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iCycleCountID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sName", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sName));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDescription));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreateDate));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@daUpdateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daUpdateDate));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iType));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sComments", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sComments));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sRequestedBy", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRequestedBy));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sMonitoredBy", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMonitoredBy));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sApprovedBy", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sApprovedBy));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@bIsActive", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bIsActive));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sCriteriaXML", SqlDbType.Xml, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCriteriaXML));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if (_errorCode != 0)
                 {
                     // Throw error.
                     throw new Exception("Stored Procedure 'pr_CycleCountMaster_Update' reported the ErrorCode: " + _errorCode);
                 }

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CycleCountMaster::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iCycleCountID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CycleCountMaster_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = _mainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iCycleCountID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iCycleCountID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode == 100)
                {
                    // Throw error.
                    throw new Exception("100");
                }

				if(_errorCode != 0)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CycleCountMaster_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception(ex.Message);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override DataTable SelectAll()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_CycleCountMaster_SelectAll]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("CycleCountMaster");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = _mainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@DataOwnerID", SqlDbType.Int, 4, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _dataOwnerID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                _errorCode = (SqlInt32)scmCmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != 0)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CycleCountMaster_SelectAll' reported the ErrorCode: " + _errorCode);
                }

            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CycleCountMaster::SelectAll::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
            return dtToReturn;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public  DataTable SelectMasterDetailOne()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_CycleCountMaster_SelectMasterDetailOne]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("CycleCountMasterDetail");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = _mainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iCycleCountID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iCycleCountID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                _errorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != 0)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CycleCountMaster_SelectMasterDetailOne' reported the ErrorCode: " + _errorCode);
                }
                return dtToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CycleCountMaster::SelectMasterDetailOne::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }

        public virtual DataSet GetCCAssets()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_CycleCount_GetAllAssets]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataSet dsToReturn = new DataSet("CycleCountAssets");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = _mainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iCycleCountID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iCycleCountID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dsToReturn);
                if (dsToReturn.Tables.Count > 0)
                {
                    dsToReturn.Tables[0].TableName = "Asset";
                    if (dsToReturn.Tables.Count > 1)
                        dsToReturn.Tables[1].TableName = "AssetTags";
                }

                _errorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != 0)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CycleCount_GetAllAssets' reported the ErrorCode: " + _errorCode);
                }

                return dsToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CycleCountMaster::GetCCAssets::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }

        public virtual DataSet GetCCSectionAssets()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_CycleCount_GetAllSectionAssets]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataSet dsToReturn = new DataSet("CycleCountSectionAssets");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = _mainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iCycleCountID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iCycleCountID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dsToReturn);
                if (dsToReturn.Tables.Count > 0)
                {
                    dsToReturn.Tables[0].TableName = "Section";
                    if (dsToReturn.Tables.Count > 1)
                        dsToReturn.Tables[1].TableName = "SectionTags";
                }
                _errorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != 0)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CycleCount_GetAllSectionAssets' reported the ErrorCode: " + _errorCode);
                }

                return dsToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CycleCountMaster::GetCCSectionAssets::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }


        public DataTable SelectAllInstanceToCreate()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_CycleCountMasterInstanceToCreate_SelectAll]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("CycleCountMaster");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = _mainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@DataOwnerID", SqlDbType.Int, 4, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _dataOwnerID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                _errorCode = (SqlInt32)scmCmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != 0)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CycleCountMasterInstanceToCreate_SelectAll' reported the ErrorCode: " + _errorCode);
                }

            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CycleCountMaster::SelectAllInstanceToCreate::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
            return dtToReturn;
        }

        public DataTable SelectAllCriteriaWCycleCountIDLogic()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_CycleCountCriteria_SelectAllWCycleCountIDLogic]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("CycleCountMaster");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = _mainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iCycleCountID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iCycleCountID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                _errorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != 0)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CycleCountCriteria_SelectAllWCycleCountIDLogic' reported the ErrorCode: " + _errorCode);
                }

                return dtToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CycleCountMaster::SelectAllCriteriaWCycleCountIDLogic::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }

        /// <summary>
        /// Check if live instance exists for a given Audit.
        /// Mandatory class properties : iCycleCountID
        /// </summary>
        /// <returns>bool</returns>
        public bool LiveInstanceExists()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_CycleCountMaster_LiveInstanceExists]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            scmCmdToExecute.Connection = _mainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iCycleCountID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iCycleCountID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

               int ReturnVal= (int)scmCmdToExecute.ExecuteScalar();

                _errorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != 0)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CycleCountMaster_LiveInstanceExists' reported the ErrorCode: " + _errorCode);
                }

                if (ReturnVal == 0)
                    return false;
                else
                    return true;

            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CycleCountMaster::LiveInstanceExists::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                scmCmdToExecute.Dispose();                
            }
           
        }

		#region Class Property Declarations
		public SqlInt32 iCycleCountID
		{
			get
			{
				return m_iCycleCountID;
			}
			set
			{
				SqlInt32 iCycleCountIDTmp = (SqlInt32)value;
				if(iCycleCountIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iCycleCountID", "iCycleCountID can't be NULL");
				}
				m_iCycleCountID = value;
			}
		}

		public SqlString sName
		{
			get
			{
				return m_sName;
			}
			set
			{
				SqlString sNameTmp = (SqlString)value;
				if(sNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sName", "sName can't be NULL");
				}
				m_sName = value;
			}
		}

		public SqlString sDescription
		{
			get
			{
				return m_sDescription;
			}
			set
			{
				SqlString sDescriptionTmp = (SqlString)value;
				if(sDescriptionTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sDescription", "sDescription can't be NULL");
				}
				m_sDescription = value;
			}
		}

		public SqlDateTime daCreateDate
		{
			get
			{
				return m_daCreateDate;
			}
			set
			{
				SqlDateTime daCreateDateTmp = (SqlDateTime)value;
                if (daCreateDateTmp.IsNull)
				{
                    throw new ArgumentOutOfRangeException("daCreateDate", "daCreateDate can't be NULL");
				}
                m_daCreateDate = value;
			}
		}

		public SqlDateTime daUpdateDate
		{
			get
			{
				return m_daUpdateDate;
			}
			set
			{
				SqlDateTime daUpdateDateTmp = (SqlDateTime)value;
                if (daUpdateDateTmp.IsNull)
				{
                    throw new ArgumentOutOfRangeException("daUpdateDate", "daUpdateDate can't be NULL");
				}
                m_daUpdateDate = value;
			}
		}

		public SqlDateTime daLatePeriod
		{
			get
			{
				return m_daLatePeriod;
			}
			set
			{
				SqlDateTime daLatePeriodTmp = (SqlDateTime)value;
				if(daLatePeriodTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daLatePeriod", "daLatePeriod can't be NULL");
				}
				m_daLatePeriod = value;
			}
		}

		public SqlInt32 iType
		{
			get
			{
				return m_iType;
			}
			set
			{
				SqlInt32 iTypeTmp = (SqlInt32)value;
				if(iTypeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iType", "iType can't be NULL");
				}
				m_iType = value;
			}
		}

		public SqlInt32 iTypeOld
		{
			get
			{
				return m_iTypeOld;
			}
			set
			{
				SqlInt32 iTypeOldTmp = (SqlInt32)value;
				if(iTypeOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iTypeOld", "iTypeOld can't be NULL");
				}
				m_iTypeOld = value;
			}
		}

		public SqlString sComments
		{
			get
			{
				return m_sComments;
			}
			set
			{
				SqlString sCommentsTmp = (SqlString)value;
				if(sCommentsTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sComments", "sComments can't be NULL");
				}
				m_sComments = value;
			}
		}

		public SqlString sRequestedBy
		{
			get
			{
				return m_sRequestedBy;
			}
			set
			{
				SqlString sRequestedByTmp = (SqlString)value;
				if(sRequestedByTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sRequestedBy", "sRequestedBy can't be NULL");
				}
				m_sRequestedBy = value;
			}
		}

		public SqlString sMonitoredBy
		{
			get
			{
				return m_sMonitoredBy;
			}
			set
			{
				SqlString sMonitoredByTmp = (SqlString)value;
				if(sMonitoredByTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sMonitoredBy", "sMonitoredBy can't be NULL");
				}
				m_sMonitoredBy = value;
			}
		}

		public SqlString sApprovedBy
		{
			get
			{
				return m_sApprovedBy;
			}
			set
			{
				SqlString sApprovedByTmp = (SqlString)value;
				if(sApprovedByTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sApprovedBy", "sApprovedBy can't be NULL");
				}
				m_sApprovedBy = value;
			}
		}

		public SqlBoolean bIsActive
		{
			get
			{
				return m_bIsActive;
			}
			set
			{
				m_bIsActive = value;
			}
		}

        public SqlInt32 iZoneID
        {
            get
            {
                return m_iZoneID;
            }
            set
            {
                SqlInt32 iZoneTmp = (SqlInt32)value;
                if (iZoneTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("m_iZoneID", "m_iZoneID can't be NULL");
                }
                m_iZoneID = value;
            }
        }

        public SqlString CriteriaXML
        {
            get
            {
                return m_sCriteriaXML;
            }
            set
            {
                SqlString sCriteriaXMLTmp = (SqlString)value;
                if (sCriteriaXMLTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("CriteriaXML", "CriteriaXML can't be NULL");
                }
                m_sCriteriaXML = value;
            }
        }


        public SqlInt32 DataOwnerID
        {
            get
            {
                return _dataOwnerID;
            }
            set
            {
                _dataOwnerID = value;
            }
        }
        #endregion
	}
}
